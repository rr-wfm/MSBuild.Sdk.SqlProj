<?xml version="1.0" encoding="utf-8"?>
<!--
  This file contains the necessary targets to build an MSBuild.Sdk.SqlProj project.
  It is heavily inspired by Microsoft.Build.NoTargets with some modifications.
  See https://github.com/microsoft/MSBuildSdks for more details.
-->
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    Set LanguageTargets to Microsoft.Common.targets for any project that the SDK won't (.proj, .noproj, etc)
    https://github.com/dotnet/sdk/blob/50ddfbb91be94d068514e8f4b0ce1052156364a0/src/Tasks/Microsoft.NET.Build.Tasks/sdk/Sdk.targets#L28

    We can't default LanguageTargets it is set in the SDK and immediately imported.  So we can only default
    it if we know the SDK won't.  Projects probably won't load in Visual Studio but will build from the
    command-line just fine.
  -->
  <PropertyGroup>
    <LanguageTargets Condition=" '$(LanguageTargets)' == '' And '$(MSBuildProjectExtension)' != '.csproj' And '$(MSBuildProjectExtension)' != '.vbproj' And '$(MSBuildProjectExtension)' != '.fsproj' ">$(MSBuildToolsPath)/Microsoft.Common.targets</LanguageTargets>
    <MSBuildAllProjects Condition="'$(MSBuildToolsVersion)' != 'Current'">$(MSBuildAllProjects);$(MsBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Import Project="$(CustomBeforeNoTargets)" Condition="'$(CustomBeforeNoTargets)' != '' and Exists('$(CustomBeforeNoTargets)')" />

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <ItemGroup>
    <!-- Enable detection of this project SDK - see https://github.com/microsoft/VSProjectSystem/blob/master/doc/overview/about_project_capabilities.md -->
    <ProjectCapability Include="MSBuild.Sdk.SqlProj.BuildTSqlScript" />

    <!-- Override primary output path to be a .dacpac -->
    <_IntermediateAssembly Include="@(IntermediateAssembly)" />
    <IntermediateAssembly Remove="@(IntermediateAssembly)" />
    <IntermediateAssembly Include="@(_IntermediateAssembly->'%(Identity)'->Replace('.dll', '.dacpac'))" />

    <!-- Not generating a reference assembly, so skip that-->
    <IntermediateRefAssembly Remove="@(IntermediateRefAssembly)" />
  </ItemGroup>

  <PropertyGroup>
    <!--We won't be generating debug symbols here -->
    <_DebugSymbolsProduced>false</_DebugSymbolsProduced>
    <CoreBuildDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      ResolveReferences;
      GetTargetPath;
      CoreCompile;
      PrepareForRun;
      IncrementalClean;
      PostBuildEvent
    </CoreBuildDependsOn>
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);SetNuSpecProperties</GenerateNuspecDependsOn>
  </PropertyGroup>

  <Target Name="SetNuSpecProperties" Condition=" Exists('$(NuspecFile)') ">
    <PropertyGroup>
      <NuspecProperties>
        id=$(PackageId);
        description=$(PackageDescription);
        version=$(PackageVersion);
        authors=$(Authors);
        copyright=$(Copyright);
        projecturl=$(PackageProjectUrl);
        tags=$(PackageTags);
        configuration=$(Configuration);
        tfm=$(TargetFramework);
        packagetype=Dacpac
      </NuspecProperties>
    </PropertyGroup>
  </Target>

  <!--
    The CopyFilesToOutputDirectory target is hard coded to depend on ComputeIntermediateSatelliteAssemblies.  NoTargets projects do no generate resource assemblies
    so the target is replaced with a no-op
  -->
  <Target Name="ComputeIntermediateSatelliteAssemblies" />

  <!-- For CPS/VS support. See https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/DesignTimeTargets/Microsoft.Managed.DesignTime.targets#L60 -->
  <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets"
          Condition="'$(DebuggerFlavor)' == '' And Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\Managed\Microsoft.Managed.DesignTime.targets')" />

  <Import Project="$(CustomAfterNoTargets)" Condition="'$(CustomAfterNoTargets)' != '' and Exists('$(CustomAfterNoTargets)')" />

  <!--
    Microsoft.Managed.Targets is imported by the managed language target files in MSBuild 16.0 and above, but most of the msbuild tasks are actually in Microsoft.Common.Currentversion.targets.
    So import it when the managed targets do not get imported.
  -->
  <Import Project="$(MSBuildToolsPath)\Microsoft.Managed.targets" Condition="'$(MSBuildAssemblyVersion)' >= '16.0' And '$(ManagedLanguageTargetsGotImported)' != 'true'" />

  <!--
    Validates that the environment is setup correctly for the DacpacTool to run. Currently we target .NET Core 3.1, 5.0 or 6.0 and we pick the version based on
    the BundledNETCoreAppTargetFrameworkVersion property. This property is set by the SDK, so we'll need to ensure that the SDK that is being used is compatible with one
    of the supported target frameworks.
  -->
  <Target Name="ValidateEnvironment">
    <PropertyGroup>
      <DacpacToolTfm Condition="'$(BundledNETCoreAppTargetFrameworkVersion)' == '3.1'">netcoreapp$(BundledNETCoreAppTargetFrameworkVersion)</DacpacToolTfm>
      <DacpacToolTfm Condition="'$(BundledNETCoreAppTargetFrameworkVersion)' != '3.1'">net$(BundledNETCoreAppTargetFrameworkVersion)</DacpacToolTfm>
      <DacpacToolExe>$(MSBuildThisFileDirectory)../tools/$(DacpacToolTfm)/DacpacTool.dll</DacpacToolExe>
    </PropertyGroup>
    <Error Condition="!Exists($(DacpacToolExe))"
           Text="The current SDK bundles target framework '$(BundledNETCoreAppTargetFrameworkVersion)' which is not supported by MSBuild.Sdk.SqlProj. Either install a .NET Core SDK that supports 3.1, 5.0 or 6.0, or file an issue at https://github.com/rr-wfm/MSBuild.Sdk.SqlProj/ to add support. If you have preview SDKs installed, you may have to use a global.json file: https://docs.microsoft.com/dotnet/core/tools/global-json" />
    <Message Importance="High" Text="Using target framework $(DacpacToolTfm) to run DacpacTool" />
  </Target>

  <!--
    Resolves package references to .dacpac packages by enumerating all package references, resolving their associated Pkg<package-id> property to get the physical
    location of the package and then checking if a that package contains a .dacpac file inside of the tools folder.
  -->
  <Target Name="ResolveDatabaseReferences">
    <ItemGroup>
      <!-- Resolve all package references to their physical location first -->
      <_ResolvedPackageReference Include="%(PackageReference.Identity)">
        <!-- Determine technical name of package (ie. Foo.Bar.Database -> Foo_Bar_Database) -->
        <PackageName>@(PackageReference->'%(Identity)'->Replace('.', '_'))</PackageName>
        <!-- Prepend Pkg to technical name from above and resolve variable (ie. Foo_Bar_Database -> %home%\.nuget\packages\foo.bar.database\<version> -->
        <PhysicalLocation>$(Pkg%(_ResolvedPackageReference.PackageName))</PhysicalLocation>
        <!--
          If no Pkg<package-id> property is available, fall back to deriving the physical location from several other properties.
          This isn't guaranteed to be correct, particularly when floating versions are used, but will successfully resolve most of the time.
        -->
        <PhysicalLocation Condition="'%(_ResolvedPackageReference.PhysicalLocation)'==''">$([System.String]::new('$(NuGetPackageRoot)%(PackageReference.Identity)/%(PackageReference.Version)').ToLower())</PhysicalLocation>

        <DacpacFile>%(_ResolvedPackageReference.PhysicalLocation)/tools/%(PackageReference.Identity).dacpac</DacpacFile>
        <DacpacFile Condition="Exists('%(_ResolvedPackageReference.PhysicalLocation)/tools/%(PackageReference.DacpacName).dacpac')">%(_ResolvedPackageReference.PhysicalLocation)/tools/%(PackageReference.DacpacName).dacpac</DacpacFile>
        <DatabaseVariableLiteralValue>%(PackageReference.DatabaseVariableLiteralValue)</DatabaseVariableLiteralValue>
        <SuppressMissingDependenciesErrors>%(PackageReference.SuppressMissingDependenciesErrors)</SuppressMissingDependenciesErrors>
        <!-- Constructs variable to make external parts -->
        <ExternalParts>dbl=%(PackageReference.DatabaseVariableLiteralValue)|dbv=%(PackageReference.DatabaseSqlCmdVariable)|srv=%(PackageReference.ServerSqlCmdVariable)</ExternalParts>
      </_ResolvedPackageReference>

      <!-- Resolve all project references to their physical location -->
      <_ResolvedProjectReference Include="%(_ResolvedProjectReferencePaths.Identity)">
        <DacpacFile>%(_ResolvedProjectReferencePaths.Identity)</DacpacFile>
        <DatabaseVariableLiteralValue>%(_ResolvedProjectReferencePaths.DatabaseVariableLiteralValue)</DatabaseVariableLiteralValue>
        <SuppressMissingDependenciesErrors>%(_ResolvedProjectReferencePaths.SuppressMissingDependenciesErrors)</SuppressMissingDependenciesErrors>
        <!-- Constructs variable to make external parts -->
        <ExternalParts>dbl=%(_ResolvedProjectReferencePaths.DatabaseVariableLiteralValue)|dbv=%(_ResolvedProjectReferencePaths.DatabaseSqlCmdVariable)|srv=%(_ResolvedProjectReferencePaths.ServerSqlCmdVariable)</ExternalParts>
      </_ResolvedProjectReference>

      <!-- Build a list of package/project references that include a dacpac file matching the package identity in their tools folder -->
      <DacpacReference Include="@(_ResolvedPackageReference);@(_ResolvedProjectReference)" Condition="Exists(%(DacpacFile))" />
    </ItemGroup>

    <Message Importance="normal" Text="Resolved dacpac file from package %(_ResolvedPackageReference.Identity) to %(_ResolvedPackageReference.DacpacFile)" />
    <Message Importance="normal" Text="Resolved database package references: @(DacpacReference)" />
  </Target>

  <!--
    Removes any referenced .dacpac from the _ResolvedProjectReferencePaths items to ensure that the .dacpac
    isn't passed to the ResolveAssemblyReferences target since that would treat it as a .NET assembly.
  -->
  <Target Name="RemoveDatabaseReferencesFromAssemblyReferences"
          DependsOnTargets="ResolveDatabaseReferences"
          AfterTargets="ResolveProjectReferences">
    <ItemGroup>
      <_ResolvedProjectReferencePaths Remove="%(DacpacReference.Identity)" />
    </ItemGroup>
  </Target>

  <!--
    Gets a list of included files in the pre- and post-deploy scripts to include in the incremental build Inputs
  -->
  <Target Name="GetIncludedFiles" DependsOnTargets="ValidateEnvironment">
    <!-- Build arguments for the command line tool  -->
    <PropertyGroup>
      <PreDeploymentScriptArgument>@(PreDeploy->'--predeploy %(Identity)', ' ')</PreDeploymentScriptArgument>
      <PostDeploymentScriptArgument>@(PostDeploy->'--postdeploy %(Identity)', ' ')</PostDeploymentScriptArgument>
      <DebugArgument Condition="'$(MSBuildSdkSqlProjDebug)' == 'True'">--debug</DebugArgument>
      <DacpacToolCommand>dotnet &quot;$(DacpacToolExe)&quot; collect-includes $(PreDeploymentScriptArgument) $(PostDeploymentScriptArgument) $(DebugArgument)</DacpacToolCommand>
    </PropertyGroup>
    <!-- Run it, except during design-time builds -->
    <Message Importance="low" Text="Running command: $(DacpacToolCommand)" />
    <Exec Command="$(DacpacToolCommand)" ConsoleToMsBuild="true" EchoOff="true" StandardOutputImportance="Low"
          Condition="'$(DesignTimeBuild)' != 'true' AND '$(BuildingProject)' == 'true'">
      <Output TaskParameter="ConsoleOutput" PropertyName="IncludedFiles" />
    </Exec>
    <Message Importance="low" Text="Included Files: $(IncludedFiles)" />
  </Target>

  <!--
    Performs the actual compilation of the input files (*.sql) into a .dacpac package by calling into a command line tool to do the actual work.
  -->
  <Target Name="CoreCompile" DependsOnTargets="ValidateEnvironment;ResolveDatabaseReferences;GetIncludedFiles"
          Inputs="@(Content);@(PreDeploy);@(PostDeploy);@(RefactorLog);$(IncludedFiles);$(ProjectPath)" Outputs="$(TargetPath)">
    <ItemGroup>
      <!-- Get the values for known model properties specified in the project file -->
      <_BuildPropertyNames Include="$(KnownModelProperties)" />
      <BuildPropertyNames Include="@(_BuildPropertyNames)" Condition=" '$(%(Identity))' != '' ">
        <PropertyValue>$(%(_BuildPropertyNames.Identity))</PropertyValue>
      </BuildPropertyNames>

      <!-- Get the values for known properties to be used in the create script -->
     <_DeployPropertyNames Include="$(KnownDeployProperties)" />
     <DeployPropertyNames Include="@(_DeployPropertyNames)" Condition=" '$(%(Identity))' != '' ">
       <PropertyValue>$(%(_DeployPropertyNames.Identity))</PropertyValue>
     </DeployPropertyNames>

      <!-- Compile the list of references -->
      <IncludedDacpacReferenceFiles Include="@(DacpacReference->'%(DacpacFile)')" />
    </ItemGroup>
    <!-- Write the list of input files to a file to be consumed by the dacpac tool -->
    <Message Importance="Low" Text="Writing input files to $(IntermediateOutputPath)$(MSBuildProjectName).InputFiles.txt" />
    <WriteLinesToFile
      File="$(IntermediateOutputPath)$(MSBuildProjectName).InputFiles.txt"
      Overwrite="true"
      Lines="@(Content->Distinct())" />

    <!-- Write the list of input files whith warnings suppression to a file to be consumed by the dacpac tool -->
    <ItemGroup>
      <!-- Build a list of particular files with T-SQL warning suppression -->
      <WarningsSuppressionFiles Include="@(Content->'%(Identity)|%(SuppressTSqlWarnings)')" Condition="'%(Content.SuppressTSqlWarnings)' != ''"/>
    </ItemGroup>
    <WriteLinesToFile
      File="$(IntermediateOutputPath)$(MSBuildProjectName).WarningsSuppression.txt"
      Overwrite="true"
      Lines="@(WarningsSuppressionFiles)" />

    <!-- Build arguments for the command line tool  -->
    <PropertyGroup>
      <OutputPathArgument>@(IntermediateAssembly->'-o &quot;%(Identity)&quot;', ' ')</OutputPathArgument>
      <MetadataArguments>-n &quot;$(MSBuildProjectName)&quot; -v &quot;$(PackageVersion)&quot;</MetadataArguments>
      <SqlServerVersionArgument>-sv $(SqlServerVersion)</SqlServerVersionArgument>
      <ReferenceArguments>@(DacpacReference->'-r &quot;%(DacpacFile);%(ExternalParts);%(SuppressMissingDependenciesErrors)&quot;', ' ')</ReferenceArguments>
      <InputFileArguments>-i &quot;$(IntermediateOutputPath)$(MSBuildProjectName).InputFiles.txt&quot;</InputFileArguments>
      <BuildPropertyArguments>@(BuildPropertyNames->'-bp %(Identity)=%(PropertyValue)', ' ')</BuildPropertyArguments>
      <DeployPropertyArguments>@(DeployPropertyNames->'-dp %(Identity)=%(PropertyValue)', ' ')</DeployPropertyArguments>
      <SqlCmdVariableArguments>@(SqlCmdVariable->'-sc %(Identity)=&quot;%(DefaultValue)&quot;', ' ')</SqlCmdVariableArguments>
      <PreDeploymentScriptArgument>@(PreDeploy->'--predeploy %(Identity)', ' ')</PreDeploymentScriptArgument>
      <PostDeploymentScriptArgument>@(PostDeploy->'--postdeploy %(Identity)', ' ')</PostDeploymentScriptArgument>
      <RefactorLogScriptArgument>@(RefactorLog->'--refactorlog %(Identity)', ' ')</RefactorLogScriptArgument>
      <DebugArgument Condition="'$(MSBuildSdkSqlProjDebug)' == 'True'">--debug</DebugArgument>
      <TreatTSqlWarningsAsErrorsArgument Condition="'$(TreatTSqlWarningsAsErrors)' == 'True' Or ('$(TreatWarningsAsErrors)' == 'True' And '$(TreatTSqlWarningsAsErrors)' == '')">--warnaserror</TreatTSqlWarningsAsErrorsArgument>
      <GenerateCreateScriptArgument Condition="'$(GenerateCreateScript)' == 'True'">--generatecreatescript</GenerateCreateScriptArgument>
      <TargetDatabaseNameArgument Condition="'$(TargetDatabaseName)' != '$(MSBuildProjectName)'">-tdn &quot;$(TargetDatabaseName)&quot;</TargetDatabaseNameArgument>
      <SuppressTSqlWarningsArgument Condition="'$(SuppressTSqlWarnings)'!=''">-spw &quot;$(SuppressTSqlWarnings)&quot;</SuppressTSqlWarningsArgument>
      <WarningsSuppressionListArgument Condition="'@(WarningsSuppressionFiles->'%(Identity)')'!=''">-spl &quot;$(IntermediateOutputPath)$(MSBuildProjectName).WarningsSuppression.txt&quot;</WarningsSuppressionListArgument>
      <DacpacToolCommand>dotnet &quot;$(DacpacToolExe)&quot; build $(OutputPathArgument) $(MetadataArguments) $(SqlServerVersionArgument) $(InputFileArguments) $(ReferenceArguments) $(SqlCmdVariableArguments) $(BuildPropertyArguments) $(DeployPropertyArguments) $(PreDeploymentScriptArgument) $(PostDeploymentScriptArgument) $(RefactorLogScriptArgument) $(TreatTSqlWarningsAsErrorsArgument) $(SuppressTSqlWarningsArgument) $(WarningsSuppressionListArgument) $(DebugArgument) $(GenerateCreateScriptArgument) $(TargetDatabaseNameArgument)</DacpacToolCommand>
    </PropertyGroup>
    <!-- Run it, except during design-time builds -->
    <Message Importance="Low" Text="Running command: $(DacpacToolCommand)" />
    <Exec Command="$(DacpacToolCommand)"
          Condition="'$(DesignTimeBuild)' != 'true' AND '$(BuildingProject)' == 'true'"/>

    <!-- Copy any referenced .dacpac packages to the output folder -->
    <Copy SourceFiles="@(IncludedDacpacReferenceFiles)" DestinationFolder="$(TargetDir)" />

    <!-- Copy any SQL artifacts created from the command line tool -->
    <CreateItem Include="$(IntermediateOutputPath)*.sql">
        <Output TaskParameter="Include" ItemName="SqlArtifacts" />
    </CreateItem>
    <Message Importance="Low" Text="Copying @(SqlArtifacts) to $(TargetDir)" />
    <Copy SourceFiles="@(SqlArtifacts)" DestinationFolder="$(TargetDir)" />
  </Target>

  <!--Ensure that any SQL artifacts generated by the compile are cleaned up properly -->
  <Target Name="CleanSqlArtifacts" AfterTargets="AfterClean">
      <CreateItem Include="$(IntermediateOutputPath)*.sql">
          <Output TaskParameter="Include" ItemName="SqlArtifacts" />
      </CreateItem>
      <Message Importance="Low" Text="Cleaning up Sql artifacts: @(SqlArtifacts)" />
      <Delete Files="@(SqlArtifacts)" />
      <!--Also delete those files copied to target -->
      <Delete Files="@(SqlArtifacts -> '$(TargetDir)%(Filename)%(Extension)')" />
  </Target>

  <!-- Performs a publish of the .dacpac produced by build to a configurable target server -->
  <Target Name="Publish" DependsOnTargets="Build" Condition="'$(DeployOnPublish)' != 'False'">
    <ItemGroup>
      <_DeployPropertyNames Include="$(KnownDeployProperties)" />
      <DeployPropertyNames Include="@(_DeployPropertyNames)" Condition=" '$(%(Identity))' != '' ">
        <PropertyValue>$(%(_DeployPropertyNames.Identity))</PropertyValue>
      </DeployPropertyNames>
      <!-- Resolve default values for SQLCMD variables -->
      <_ResolvedSqlCmdVariable Include="@(SqlCmdVariable)">
        <Value Condition="'%(SqlCmdVariable.Value)' != ''">%(SqlCmdVariable.Value)</Value>
        <Value Condition="'%(SqlCmdVariable.Value)' == ''">%(SqlCmdVariable.DefaultValue)</Value>
      </_ResolvedSqlCmdVariable>
    </ItemGroup>
    <PropertyGroup>
      <InputArgument>-i &quot;$(TargetPath)&quot;</InputArgument>
      <TargetServerNameArgument>-tsn &quot;$(TargetServerName)&quot;</TargetServerNameArgument>
      <TargetPortArgument Condition="'$(TargetPort)'!=''">-tprt &quot;$(TargetPort)&quot;</TargetPortArgument>
      <TargetDatabaseNameArgument>-tdn &quot;$(TargetDatabaseName)&quot;</TargetDatabaseNameArgument>
      <TargetUserArgument Condition="'$(TargetUser)'!=''">-tu &quot;$(TargetUser)&quot;</TargetUserArgument>
      <TargetPasswordArgument Condition="'$(TargetPassword)'!=''">-tp &quot;$(TargetPassword)&quot;</TargetPasswordArgument>
      <PropertyArguments>@(DeployPropertyNames->'-p %(Identity)=%(PropertyValue)', ' ')</PropertyArguments>
      <SqlCmdVariableArguments>@(_ResolvedSqlCmdVariable->'-sc %(Identity)=%(Value)', ' ')</SqlCmdVariableArguments>
      <RunScriptsFromReferencesArgument Condition="'$(RunScriptsFromReferences)' == 'True'">-sff</RunScriptsFromReferencesArgument>
      <DebugArgument Condition="'$(MSBuildSdkSqlProjDebug)' == 'True'">--debug</DebugArgument>
      <DacpacToolCommand>dotnet &quot;$(DacpacToolExe)&quot; deploy $(InputArgument) $(TargetServerNameArgument) $(TargetDatabaseNameArgument) $(TargetPortArgument) $(TargetUserArgument) $(TargetPasswordArgument) $(PropertyArguments) $(SqlCmdVariableArguments) $(RunScriptsFromReferencesArgument) $(DebugArgument)</DacpacToolCommand>
    </PropertyGroup>
    <Message Importance="Low" Text="Running command: $(DacpacToolCommand)" />
    <Exec Command="$(DacpacToolCommand)" />
  </Target>

  <!-- Lists all dacpac files of interest to the current project, so that a referencing class library can copy these to its output directory -->
  <Target Name="CopyDacpacs" BeforeTargets="GetCopyToOutputDirectoryItems">
    <ItemGroup>
      <CopyDacpacFiles Include="$(TargetPath)"/>
      <CopyDacpacFiles Include="@(DacpacReference->'%(DacpacFile)')"/>
    </ItemGroup>
    <ItemGroup>
      <AllItemsFullPathWithTargetPath Include="@(CopyDacpacFiles)">
        <CopyToOutputDirectory>Always</CopyToOutputDirectory>
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </AllItemsFullPathWithTargetPath>
    </ItemGroup>
    <Message Importance="Low" Text="CopyDacpacFiles: @(CopyDacpacFiles)" />
  </Target>
</Project>